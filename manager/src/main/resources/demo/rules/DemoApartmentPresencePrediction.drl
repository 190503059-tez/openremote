package org.openremote.test.rules;

import org.openremote.model.*;
import org.openremote.model.asset.*
import org.openremote.model.value.*;
import org.openremote.model.attribute.*;

global java.util.logging.Logger LOG;
global org.openremote.model.rules.Assets assets;
global org.openremote.container.util.Util util;

import java.util.*
import java.time.LocalDateTime
import java.time.Instant
import java.time.ZoneId
import java.time.format.DateTimeFormatter

declare CustomClock
    @role(event)
    @expires(45s)
    clock: LocalDateTime
    time: String
    dowPrev: String
    dow: String
    dowNext: String
end

declare Scene
    @role(event)
    @expires(12h)
    scene: String // scene name
    est: String   // estimated time of scene - from the table
    ast: String   // actual time of scene - masured
end


rule "PP: Update table"
when
    // Chcek if we are self learning
    AssetState(attributeName == "autoSceneSchedule", isValueTrue())
    // Rule's detected scene
    $s: Scene($scene: scene, $estimated_time: est, $actual_time: ast != "-")
    // Get estimated the table reference
    CustomClock($dow: dow) // TODO goes wrong when updating scene after midnight and the ast is before midnight. We need dowPrev for this case.
    AssetState($ref: id, type == AssetType.RESIDENCE, $an: attributeName matches ($scene + "SceneTime" + $dow))
then
    // Mark operation done
    $s.setAst("-");
    update($s);
    // protect against errors, e.g. too large gaps, over midnight pass
    String actual_time = _MaxTimeAdjustment($estimated_time, $actual_time);
    LOG.info("PP: "+$scene+" EST="+$estimated_time+", AST="+$actual_time+", cor="+actual_time);
    // Take arbitrary coefficient which works good
    Double alpha = 2.0/(3+1); // 3 stays for 3 days exponential average
    // Calculate exponential moving average from the known formula
    long new_estimated_time = (long) (alpha*util.parseTimestamp(actual_time) +
                                  (1-alpha)*util.parseTimestamp($estimated_time));
    String new_estimated_time_str = util.formatTimestampWithSeconds(new_estimated_time);
    LOG.info("PP: updated time for "+$scene+" from "+$estimated_time+" to "+new_estimated_time_str+" by measured (cor)"+actual_time);
    // Update the value in the table
    assets.dispatch( new AttributeEvent($ref, $an, Values.create(new_estimated_time_str)) );
end


rule "PP: Set custom clock fields"
    timer (cron: 0 * * * * ? *)
then
    CustomClock cc = new CustomClock();

    Instant instant = Instant.ofEpochMilli( drools.getWorkingMemory().getSessionClock().getCurrentTime() );
    LocalDateTime res = LocalDateTime.ofInstant(instant, ZoneId.systemDefault());
    cc.setClock(res);
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss");

    cc.setTime( cc.getClock().format(formatter) );
    cc.setDow( cc.getClock().getDayOfWeek().toString() );
    cc.setDowNext( cc.getClock().getDayOfWeek().plus(1).toString() );
    cc.setDowPrev( cc.getClock().getDayOfWeek().plus(-1).toString() );

    insert(cc);
end


rule "PP: Get current scheduled scene home"
when
    CustomClock($dow: dow, $t: time)
    AssetState(attributeName matches ("home.*"+$dow), type == AssetType.RESIDENCE, $ts: getValueAsString())
    AssetState(attributeName matches ("away.*"+$dow), type == AssetType.RESIDENCE, $te: getValueAsString(), _TradingTimes($t, $ts, $te))
    not Scene(scene == "home");
    // There should be movement in the living room
    AssetState(attributeName == "presenceDetected", name == "Living Room", type == AssetType.ROOM, isValueTrue() )
    // The first movement in the living room is the actual scene start
    AssetState(attributeName == "firstPresenceDetected", type == AssetType.ROOM, name == "Living Room", $ast: getValueTimestamp(), value != null, isValueGreaterThan(0) )
then
    Scene s = new Scene();
    s.setScene("home");
    s.setEst($ts);
    String ast = util.formatTimestampWithSeconds($ast);
    LOG.info("PP: HOME @ AST"+" "+ast);
    s.setAst(ast);
    insert(s);
end


rule "PP: Get current scheduled scene away"
when
    CustomClock($dow: dow, $t: time)
    AssetState(attributeName matches ("away.*"+$dow), type == AssetType.RESIDENCE, $ts: getValueAsString())
    AssetState(attributeName matches ("evening.*"+$dow), type == AssetType.RESIDENCE, $te: getValueAsString(), _TradingTimes($t, $ts, $te))
    not Scene(scene == "away");
    // There should be no movement in the whole apartment
    AssetState(attributeName == "presenceDetected", type == AssetType.RESIDENCE, valueFalse )
    // Actual scene start is the last movement in the Living Room
    AssetState($id: id, attributeName == "lastPresenceDetected", type == AssetType.ROOM, name == "Living Room", $ast: getValueTimestamp(), value != null)
    AssetState(id==$id, attributeName == "firstPresenceDetected", isValueGreaterThan(0))
then
    Scene s = new Scene();
    s.setScene("away");
    s.setEst($ts);
    String ast = util.formatTimestampWithSeconds($ast);
    LOG.info("PP: AWAY @ AST"+" "+ast);
    s.setAst(ast);
    insert(s);
    // Clear first movements in all rooms
    assets.dispatch( new AttributeEvent($id, "firstPresenceDetected", Values.create(0)) );
end


rule "PP: Get current scheduled scene evening"
when
    CustomClock($dow: dow, $t: time)
    AssetState(attributeName matches ("evening.*"+$dow), type == AssetType.RESIDENCE, $ts: getValueAsString())
    AssetState(attributeName matches ("night.*"+$dow), type == AssetType.RESIDENCE, $te: getValueAsString(), _TradingTimes($t, $ts, $te))
    not Scene(scene == "evening");
    // There should be presence in the apartment
    AssetState(attributeName == "presenceDetected", type == AssetType.RESIDENCE, isValueTrue() )
    // Actual scene start is the first movement in the living room
    AssetState(attributeName == "firstPresenceDetected", type == AssetType.ROOM, name == "Living Room", $ast: getValueTimestamp(), value != null, isValueGreaterThan(0) )
then
    Scene s = new Scene();
    s.setScene("evening");
    s.setEst($ts);
    String ast = util.formatTimestampWithSeconds($ast);
    LOG.info("PP: EVENING @ AST"+" "+ast);
    s.setAst(ast);
    insert(s);
end


rule "PP: Get current scheduled scene night"
when
    CustomClock($dow: dow, $dowNext: dowNext, $t: time)
    AssetState(attributeName matches ("night.*"+$dow), type == AssetType.RESIDENCE, $ts: getValueAsString())
    AssetState(attributeName matches ("home.*"+$dowNext), type == AssetType.RESIDENCE, $te: getValueAsString(), _TradingTimes($t, $ts, $te))
    not Scene(scene == "night");
    // No presence in the living room
    AssetState($id: id, attributeName == "presenceDetected", name == "Living Room", type == AssetType.ROOM, valueFalse )
    // Scene start is the last movement in the living room
    AssetState(id == $id, attributeName == "lastPresenceDetected", type == AssetType.ROOM, name == "Living Room", $ast: getValueTimestamp(), value != null)
    AssetState(id == $id, attributeName == "firstPresenceDetected", isValueGreaterThan(0))
then
    Scene s = new Scene();
    s.setScene("night");
    s.setEst($ts);
    String ast = util.formatTimestampWithSeconds($ast);
    LOG.info("PP: NIGHT @ AST"+" "+ast);
    s.setAst(ast);
    insert(s);
    // Clear first movements everywhere except the bedroom
    assets.dispatch( new AttributeEvent($id, "firstPresenceDetected", Values.create(0)) );
end


function String _ShiftTimeWithSeconds(Object o, int min){
  if(o==null){
    return("-");
  }
  String mt = o.toString();
  SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
  Date date = null;
  if(mt.substring(0,1).equals("-")){
    date = new Date();
    date.setTime(date.getTime()+60*60000);
  }else{
    date = sdf.parse(mt);
    date.setTime(date.getTime()+min*60000);
  }
  return(sdf.format(date));
}


function long _GetTime(Object o){
  if(o==null){
    return(0L);
  }
  String mt = o.toString();
  SimpleDateFormat sdf;
  if(mt.length()==8){
    sdf = new SimpleDateFormat("HH:mm:ss");
  }else if(mt.length()==5){
    sdf = new SimpleDateFormat("HH:mm");
  }else{
    return(0L);
  }
  Date date = null;
  date = sdf.parse(mt);
  return(date.getTime());
}

function boolean _TradingTimes(Object now, Object start, Object endt){
  long _now = _GetTime(now);
  long _start = _GetTime(start);
  long _end = _GetTime(endt);
  while(_start < _now){ _start += 86400000L; }
  while(_end   < _now){ _end += 86400000L; }
  return(_end < _start);
}

function String _MaxTimeAdjustment(Object estimated, Object actual){
// This function checks if the actual time is within range +- 60min of estimated time and adjust it if necessary.
  int MAX = 60; // maximum difference in minutes
  if(estimated==null) return("-");
  if(actual==null) return(estimated.toString());
  long _estimated = _GetTime(estimated);
  long _actual = _GetTime(actual);
  if(_TradingTimes(actual, _ShiftTimeWithSeconds(estimated, -MAX), _ShiftTimeWithSeconds(estimated, MAX))){
    // Within 1h
    return(actual.toString());
  }
  // Here we have a shift > 1h and < 12h, so ceil it to 1h
  if(java.lang.Math.abs(_estimated-_actual) > 12*60*60000){
    // we need good over the midnight passing
    _estimated = _GetTime(_ShiftTimeWithSeconds(estimated, 12*60));
    _actual = _GetTime(_ShiftTimeWithSeconds(actual, 12*60));
  }else if(java.lang.Math.abs(_estimated-_actual) == 12*60*60000){
    // exactly 12h difference -> do not adjust
    return(estimated.toString());
  }

  if(_estimated > _actual){
    return(_ShiftTimeWithSeconds(estimated, -MAX));
  }
  // else <=
  return(_ShiftTimeWithSeconds(estimated, MAX));
}

// TODO special care must be taken for the night scene as it can start before or after midnight.

// TODO below with over the midnight scenes
rule "PP: Get current scheduled scene still previous evening"
// From table find out in which scene we should be
// scenes are prevevening-prevnight-home-away-evening-night
when
    CustomClock($dow: dow, $dowPrev: dowPrev, $t: time)
    AssetState(attributeName matches ("evening.*"+$dowPrev), type == AssetType.RESIDENCE, $ts: getValueAsString())
    AssetState(attributeName matches ("night.*"+$dowPrev), type == AssetType.RESIDENCE, $te: getValueAsString(), _TradingTimes($t, $ts, $te))
then
//    LOG.info("@"+$c.toString() );
end

rule "PP: Get current scheduled scene prev night"
// From table find out in which scene we should be
// scenes are prevevening-prevnight-home-away-evening-night
when
    CustomClock($dow: dow, $dowPrev: dowPrev, $t: time)
    AssetState(attributeName matches ("night.*"+$dowPrev), type == AssetType.RESIDENCE, $ts: getValueAsString())
    AssetState(attributeName matches ("home.*"+$dow), type == AssetType.RESIDENCE, $te: getValueAsString(), _TradingTimes($t, $ts, $te))
then
//    LOG.info("@"+$c.toString() );
end


rule "PP: dash scene home"
when
    CustomClock($dow: dow, $t: time)
    AssetState($ref: id, attributeName matches ("home.*"+$dow), type == AssetType.RESIDENCE, $ts: getValueAsString())
    AssetState($ref == id, attributeName matches ("away.*"+$dow), type == AssetType.RESIDENCE, $te: getValueAsString(), _TradingTimes($t, $ts, $te))
    $apartment: AssetState($ref == id, type == AssetType.RESIDENCE, attributeName == "lastDetectedScene", $val: getValueAsString() != "home", $val != "away")
then
    LOG.info("PP: dash home in "+$apartment.toString());
    assets.dispatch( new AttributeEvent($ref, "lastDetectedScene", Values.create("home")) );
end


rule "PP: before scene home to reset the first presence"
when
    CustomClock($dow: dow, $t: time)
    AssetState(attributeName matches ("home.*"+$dow), type == AssetType.RESIDENCE, $ts: getValueAsString(), _TradingTimes($t, _ShiftTimeWithSeconds($ts,-30), _ShiftTimeWithSeconds($ts,-29)))
    $room: AssetState($ref: id, type == AssetType.ROOM, attributeName == "firstPresenceDetected", isValueGreaterThan(0) )
    AssetState($ref == id, type == AssetType.ROOM, attributeName == "presenceDetected", valueFalse)
then
    LOG.info("PP: home reset first presence in "+$room.toString());
    assets.dispatch( new AttributeEvent($ref, "firstPresenceDetected", Values.create(0)) );
end


rule "PP: dash scene away"
when
    CustomClock($dow: dow, $t: time)
    AssetState($ref: id, attributeName matches ("away.*"+$dow), type == AssetType.RESIDENCE, $ts: getValueAsString())
    AssetState($ref == id, attributeName matches ("evening.*"+$dow), type == AssetType.RESIDENCE, $te: getValueAsString(), _TradingTimes($t, $ts, $te))
    $apartment: AssetState($ref == id, type == AssetType.RESIDENCE, attributeName == "lastDetectedScene", $val: getValueAsString() != "away", $val != "evening")
then
    LOG.info("PP: dash away in "+$apartment.toString());
    assets.dispatch( new AttributeEvent($ref, "lastDetectedScene", Values.create("away")) );
end


rule "PP: dash scene evening"
when
    CustomClock($dow: dow, $t: time)
    AssetState($ref: id, attributeName matches ("evening.*"+$dow), type == AssetType.RESIDENCE, $ts: getValueAsString())
    AssetState($ref == id, attributeName matches ("night.*"+$dow), type == AssetType.RESIDENCE, $te: getValueAsString(), _TradingTimes($t, $ts, $te))
    $apartment: AssetState($ref == id, type == AssetType.RESIDENCE, attributeName == "lastDetectedScene", $val: getValueAsString() != "evening", $val != "night")
then
    LOG.info("PP: dash evening in "+$apartment.toString());
    assets.dispatch( new AttributeEvent($ref, "lastDetectedScene", Values.create("evening")) );
end


rule "PP: before scene evening to reset the first presence"
when
    CustomClock($dow: dow, $t: time)
    AssetState(attributeName matches ("evening.*"+$dow), type == AssetType.RESIDENCE, $ts: getValueAsString(), _TradingTimes($t, _ShiftTimeWithSeconds($ts,-30), _ShiftTimeWithSeconds($ts,-29)))
    $room: AssetState($ref: id, type == AssetType.ROOM, attributeName == "firstPresenceDetected", isValueGreaterThan(0) )
    AssetState($ref == id, type == AssetType.ROOM, attributeName == "presenceDetected", valueFalse)
then
    LOG.info("PP: evening reset first presence in "+$room.toString());
    assets.dispatch( new AttributeEvent($ref, "firstPresenceDetected", Values.create(0)) );
end


rule "PP: dash scene night"
when
    CustomClock($dow: dow, $dowNext: dowNext, $t: time)
    AssetState($ref: id, attributeName matches ("night.*"+$dow), type == AssetType.RESIDENCE, $ts: getValueAsString())
    AssetState($ref == id, attributeName matches ("home.*"+$dowNext), type == AssetType.RESIDENCE, $te: getValueAsString(), _TradingTimes($t, $ts, $te))
    $apartment: AssetState($ref == id, type == AssetType.RESIDENCE, attributeName == "lastDetectedScene", $val: getValueAsString() != "night", $val != "home")
then
    LOG.info("PP: dash night in "+$apartment.toString());
    assets.dispatch( new AttributeEvent($ref, "lastDetectedScene", Values.create("night")) );
end