# Demo setup of OpenRemote v3 on Rasperry Pi 3
#
version: '2.1'
services:

  # The frontend proxy, terminates SSL/TLS connections and forwards them to the Manager backend.
  # TODO Document how to install sidecar letsencrypt container for production certificates, with shared volume mapping.
  haproxy:

    # Use installed or pull the latest image from Docker Hub.
    image: openremote/rpi-haproxy:latest

    environment:

      # It is important that all services have the same timezone and are time synchronized.
      # Bearer tokens are only valid for minutes, and authentication fails if Keycloak drifts.
      TZ: Europe/Zurich

      # This is a demo configuration with a self-signed dummy SSL certificate, baked into the image.
      HAPROXY_CONFIG: /etc/haproxy/demo/haproxy-demo.cfg

    # This service needs access to other services on the Docker network.
    links:
      - manager

    # Expose a public web service mapped to ports on the host.
    ports:
      - "80:80"
      - "443:443"

    # Configure logging of the container
    logging:
        options:
            max-size: 10m

  # The API gateway and Manager web application.
  manager:

    # Use installed or pull the latest image from Docker Hub.
    image: openremote/rpi-manager:latest

    environment:

      TZ: Europe/Zurich

      # If developer mode is enabled, all setup tasks will be executed on application startup.
      # This will clean all data in the Manager database, and then import demo/test
      # data. Some caching and other runtime performance-optimizations will also be disabled.
      DEV_MODE: 'false'

      # If you are not running in developer mode, and this is the first time you are starting
      # the application, you can configure which setup tasks you want to execute. Careful,
      # these tasks will clean and populate the Manager database with demo data!
      SETUP_INIT_CLEAN_DATABASE: 'true'
      SETUP_BASIC_IDENTITY_ADMIN_PASSWORD: secret
      SETUP_IMPORT_DEMO_USERS: 'true'
      SETUP_IMPORT_DEMO_ASSETS: 'true'
      SETUP_IMPORT_DEMO_RULES: 'true'

      # Use basic identity service instead of Keycloak, set master admin password
      MANAGER_IDENTITY_PROVIDER: basic
      SETUP_BASIC_IDENTITY_ADMIN_PASSWORD: 'secret'

      # The public host name of this OpenRemote installation. This name must be the name you
      # access the web services under.
      IDENTITY_NETWORK_HOST: ${IDENTITY_NETWORK_HOST:-10.0.0.123}

      # Set if SSL is enabled on the frontend reverse proxy and all internal proxies should assume https
      IDENTITY_NETWORK_SECURE: 'true'

      # The public port of this OpenRemote installation.
      IDENTITY_NETWORK_WEBSERVER_PORT: 443

      # The service-internal JDBC connection URL for the database service.
      DATABASE_CONNECTION_URL: jdbc:postgresql://postgresql/openremote

      # The database connection settings, passwords should be changed in production!
      DATABASE_USERNAME: openremote
      DATABASE_PASSWORD: CHANGE_ME_DB_USER_PASSWORD
      DATABASE_MIN_POOL_SIZE: 5
      DATABASE_MAX_POOL_SIZE: 20
      DATABASE_CONNECTION_TIMEOUT_SECONDS: 300

      # The service-internal host name and port of the identity provider.
      KEYCLOAK_HOST: keycloak
      KEYCLOAK_PORT: 8080

      # Optional: Console applications can register for push notifications through FCM.
      # NOTIFICATION_FIREBASE_URL: https://fcm.googleapis.com/fcm/send
      # NOTIFICATION_FIREBASE_API_KEY = '...'

      # Optional: Override built-in logging.properties with a file of your choice
      # LOGGING_CONFIG_FILE: /my/manager/logging.properties

    # This service needs access to other services on the Docker network.
    links:
      - postgresql

    # Configure logging of the container, see config/logging.properties
    logging:
        options:
            max-size: 10m

  # PostgreSQL DBMS
  postgresql:
    image: openremote/rpi-postgresql:latest
    environment:
      TZ: Europe/Zurich

      # Create transient database and user. For production, run this once
      # with your volume mapping, then remove the variables and restart
      POSTGRES_DB: openremote
      POSTGRES_USER: openremote
      POSTGRES_PASSWORD: CHANGE_ME_DB_USER_PASSWORD

      # You can open an SQL console on a running container with:
      # docker exec -it <container ID> psql -U openremote

    # Durable data requires a volume mapping on your Docker host
    # volumes:
    #  - /path/to/data/on/my/host:/var/lib/pgsql/data

    # Configure logging of the container
    logging:
        options:
            max-size: 10m
