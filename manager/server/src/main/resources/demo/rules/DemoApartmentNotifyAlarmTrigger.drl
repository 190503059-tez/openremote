package org.openremote.test.rules;

import org.openremote.model.*;
import org.openremote.model.asset.*;
import org.openremote.model.user.*;
import org.openremote.model.value.*;
import org.openremote.model.attribute.*;
import org.openremote.model.notification.*;
import java.text.SimpleDateFormat;
import java.util.List;

global java.util.logging.Logger LOG;
global org.openremote.model.rules.Users users;
global org.openremote.model.rules.Assets assets;

declare AlarmTrigger
    residenceId : String
    roomName : String
end

// Notify the user every 30 minutes while alarm is triggered
declare UserNotified
    @role(event)
    @expires(30m)
    residenceId : String
end

rule "Trigger alarm when alarm is enabled and presence is detected in any room"
when
    $residence : AssetState(type == AssetType.RESIDENCE, attributeName == "alarmEnabled", valueTrue)
    $room : AssetState(parentId == $residence.id, type == AssetType.ROOM, attributeName == "presenceDetected", valueTrue)
    not AlarmTrigger(residenceId == $residence.id) // we don't need more than one trigger per apartment
then
    AlarmTrigger trigger =new AlarmTrigger();
    trigger.setResidenceId($residence.getId());
    trigger.setRoomName($room.getName());
    insert(trigger);
end

rule "Stop alarm when alarm has been triggered and no presence is detected in any room"
when
    $residence : AssetState(type == AssetType.RESIDENCE) // retract trigger always so they don't leak
    $alarmTrigger : AlarmTrigger(residenceId == $residence.id)
    not AssetState(parentId == $residence.id, type == AssetType.ROOM, attributeName == "presenceDetected", valueTrue)
then
    delete($alarmTrigger);
end

rule "Alert user when alarm has been triggered and not done so already"
when
    $residence : AssetState(type == AssetType.RESIDENCE, attributeName == "alarmEnabled", valueTrue)
    $alarmTrigger : AlarmTrigger(residenceId == $residence.id)
    not(UserNotified(residenceId == $residence.id))
then
    LOG.fine("Alarm in apartment (room: " + $alarmTrigger.getRoomName() + "): " + $residence);

    String timestamp = new SimpleDateFormat(Constants.DEFAULT_DATETIME_FORMAT).format(
        drools.getWorkingMemory().getSessionClock().getCurrentTime()
    );
    AlertNotification alert = new AlertNotification(
        "Apartment Alarm", "Aanwezigheid in " + $alarmTrigger.getRoomName() + " (" + timestamp + ")."
    );
    alert.addLinkAction("Details", "#/Veilig");
    alert.addActuatorAction("Alarm uit", $residence.getId(), "alarmEnabled", Values.create(false).toJson());

    List<String> userIds = users
        .query()
        .asset(new UserQuery.AssetPredicate($residence.getId()))
        .getResults();

    LOG.fine("Sending alert to apartment users: " + userIds);
    userIds.forEach(userId -> users.storeAndNotify(userId, alert));

    UserNotified userNotified = new UserNotified();
    userNotified.setResidenceId($residence.getId());
    insert(userNotified);
    delete($alarmTrigger); // For sure we don't want to notify user on the same trigger.
end

rule "Retract alarm triggers and alerts when alarm disabled"
when
    $residence : AssetState(type == AssetType.RESIDENCE, attributeName == "alarmEnabled", valueFalse)
    $alarmTrigger : AlarmTrigger(residenceId == $residence.id)
then
    delete($alarmTrigger);
end

rule "Retract user notified and alerts when alarm disabled"
when
    $residence : AssetState(type == AssetType.RESIDENCE, attributeName == "alarmEnabled", valueFalse)
    $userNotified : UserNotified(residenceId == $residence.id)
then
    delete($userNotified);
end
