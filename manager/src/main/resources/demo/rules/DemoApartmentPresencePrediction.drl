package org.openremote.test.rules;

import org.openremote.model.*;
import org.openremote.model.asset.*
import org.openremote.model.value.*;
import org.openremote.model.attribute.*;

global java.util.logging.Logger LOG;
global org.openremote.model.rules.Assets assets;
global org.openremote.container.util.Util util;

/*
New:

    // ROOM
    presenceDetected                    // true/false
    presenceDetectedInteger             // 1 on motion sense, 0 after 2 seconds. This behavior models typical PIR sensor
    lastPresenceDetectedTimeStamp       // Unix timestamp milliseconds

    // RESIDENCE
    selfLearning                        // true/false
    vacationDays                        // 0..123

    homeSceneStartMonday                // "17:30:00"
    homeSceneStartTuesday               // "17:45:00"
    ...
    awaySceneStartMonday                // "08:30:00"
    awaySceneStartTuesday               // "08:30:00"

    rule "..."
    when
        $dayOfWeek : util.formatDate("DAY_OF_WEEK", drools.clock.currentTime)
        AssetState(type == RESIDENCE, attributeName matches "homeSceneStart" + $dayOfWeek, valueChanged)
    then
        ...
    end

Old:

    presenceDetected                    // "on"
    presenceDetectedInteger             // 0, 1
    lastPresenceDetectedTimeStamp         // "-", hh:mm
    presenceDetectedUI                  // "Yes"/"No", Latches for 15mins; translates to somebody/nobody is in the office

    VACATION_DAYS                       // "0"

    UI_ESTIMATED_TIME_ARRIVAL           // This is today
    UI_ESTIMATED_TIME_DEPARTURE         // This is today
    UI_ESTIMATED_TIME_ARRIVAL.mon       // "9:00"
    UI_ESTIMATED_TIME_DEPARTURE.mon     // "17:00"
    UI_ESTIMATED_TIME_ARRIVAL.tue       // "9:00"
    UI_ESTIMATED_TIME_DEPARTURE.tue     // "17:00"
    UI_ESTIMATED_TIME_ARRIVAL.wed       // "9:00"
    UI_ESTIMATED_TIME_DEPARTURE.wed     // "17:00"
    ...

    homeActualSceneStartTime               // "-", e.g. "08:53"
    awayActualSceneStartTime               // "-", e.g. "18:22"

    currentScene                          // "-", Possible values are "-", "Departure", "Arrive"
*/


// ##########################################################################################################

// This rule converts any manufacturer dependent movement sensor into standardized PIR behaviour.
// Here emulate PIR from motionCount by Enervalis
rule "person sense"
when
    AssetEvent(type == AssetType.ROOM, attributeName == "motionCount", isValueGreaterThanOldValue() )
    $room: AssetEvent($id: id, type == AssetType.ROOM, attributeName=="presenceDetectedInteger", getValueAsNumber() !=1)
then
    LOG.info("@"+(new java.util.Date(drools.getWorkingMemory().getSessionClock().getCurrentTime())).toString());
    assets.dispatch( new AttributeEvent($id, "lastPresenceDetectedTimeStamp", Values.create(1) ) );
end


// This rule models monostable PIR sensor behaviour, which goes to off state after 2s timeout
rule "no person sense"
    timer(int: 2s)
when
    AssetEvent(type == AssetType.ROOM, attributeName == "motionCount", isValueGreaterThanOldValue())
    AssetEvent($id: id, type == AssetType.ROOM, $s:attributeName=="presenceDetectedInteger", getValueAsNumber()!=0)
then
    LOG.info("@"+(new java.util.Date(drools.getWorkingMemory().getSessionClock().getCurrentTime())).toString());
    assets.dispatch( new AttributeEvent($id, "lastPresenceDetectedTimeStamp", Values.create(0)) );
end

// Fetch last time when presence was detected. This time is used for period window adjustment.
rule "last move sense timestamp fetch"
when
    AssetEvent($id: id, type == AssetType.ROOM, attributeName=="presenceDetectedInteger", getValueAsNumber()==1, isValueChanged() )
then
    long currentTime = drools.getWorkingMemory().getSessionClock().getCurrentTime();
    LOG.info("Move sense on "+$id+" @"+(new java.util.Date(currentTime)).toString() );
    assets.dispatch(
            // we want that this time stamp is persistent in memory because periods are quite long and it
            // is likely that a rule engine can restart in this time. Experience learns that this can
            // disturb the prediction time.
            new AttributeEvent($id, "lastPresenceDetectedTimeStamp", Values.create(currentTime))
    );
end

// Set the presence state which was previously used in the UI "Somebody is in the office"
rule "Presence"
when
    AssetEvent(type == AssetType.ROOM, $s:attributeName=="presenceDetectedInteger", getValueAsNumber()==1)
    AssetState(type == AssetType.RESIDENCE, attributeName=="currentScene", getValueAsString()=="Departure") // within expected attendance schedule
    AssetState($id: id, type == AssetType.RESIDENCE, attributeName=="presenceDetectedUI", getValueAsString()!="Yes")
then
    assets.dispatch( new AttributeEvent($id, "presenceDetectedUI", Values.create("Yes")) );
end

rule "Absence after 15 min"
    timer(int: 15m)
when
    AssetEvent($id: id, type == AssetType.ROOM, $s:attributeName=="presenceDetectedInteger", getValueAsNumber()==0)
then
    assets.dispatch( new AttributeEvent($id, "presenceDetectedUI", Values.create("No")) );
end

// ##########################################################################################################

// The office hours starts from Arrival till Departure. This is comparable to Home or Evening scene in blok61.
// The outside office hours are from Departure till the next day Arrival. Comparable to Away and Night.
// There were 2 in memory variables (now AssetStates) which holds actual arrival and departure time. They need
// to be reset before scene begins to fetch the actual time which is later used to correct the estimated time
// in moving average calculations.
// There are 4 rules below, one for each scene, the actual start time of a scene is reset when the preceding scene
// starts. Perhaps we can use as a trigger one more preceding scene which give as less trouble with earlier
// scene starting.

rule "reset homeActualSceneStartTime"
when
    AssetState(attributeName=="currentScene", type == AssetType.RESIDENCE, getValueAsString()=="night")
    AssetState($id: id, attributeName=="homeActualSceneStartTime", type == AssetType.RESIDENCE, getValueAsString() != "-")
then
    assets.dispatch( new AttributeEvent($id, "homeActualSceneStartTime", Values.create("-")) );
end

rule "reset awayActualSceneStartTime"
when
    AssetState(attributeName=="currentScene", type == AssetType.RESIDENCE, getValueAsString()=="home")
    AssetState($id: id, attributeName=="awayActualSceneStartTime", type == AssetType.RESIDENCE, getValueAsString() != "-")
then
    assets.dispatch( new AttributeEvent($id, "awayActualSceneStartTime", Values.create("-")) );
end

rule "reset eveningActualSceneStartTime"
when
    AssetState(attributeName=="currentScene", type == AssetType.RESIDENCE, getValueAsString()=="away")
    AssetState($id: id, attributeName=="eveningActualSceneStartTime", type == AssetType.RESIDENCE, getValueAsString() != "-")
then
    assets.dispatch( new AttributeEvent($id, "eveningActualSceneStartTime", Values.create("-")) );
end

rule "reset nightActualSceneStartTime"
when
    AssetState(attributeName=="currentScene", type == AssetType.RESIDENCE, getValueAsString()=="evening")
    AssetState($id: id, attributeName=="nightActualSceneStartTime", type == AssetType.RESIDENCE, getValueAsString() != "-")
then
    assets.dispatch( new AttributeEvent($id, "nightActualSceneStartTime", Values.create("-")) );
end

// Removed rules:
// rule "Move ETD to ET at arrive init"
// rule "Move ETD to ET at arrive"
// because they were used for the old UI display.

rule "fetch the actual scene start time"
when
//    $timestamp : util.formatTimestamp(drools.clock.currentTime)
    AssetState(attributeName=="currentScene", type == AssetType.RESIDENCE, $scene: getValueAsString())
//TODO    AssetState($id:id, $attributeName: attributeName==$scene."ActualSceneStartTime", getValueAsString() == "-")
    // TODO the actual arrive state was detected by presence sensor. Now we have 2 scenes when presence is
    // detected and 2 when absence is detected
    AssetEvent($id: id, type == AssetType.ROOM, attributeName=="presenceDetectedInteger", getValueAsNumber()==1)
then
    assets.dispatch( new AttributeEvent($id, "nightActualSceneStartTime", Values.create(drools.getWorkingMemory().getSessionClock().getCurrentTime()) ));
end

rule "fetch earlier actual home scene start time up to 30 min v02"
when
    // Earliest home scene start time is 4AM
// TODO    $timestamp : util.formatTimestamp(drools.clock.currentTime) >= util.parseTimestamp("04:00")
    AssetState($id: id, $attributeName: attributeName=="homeActualSceneStartTime", getValueAsString() == "-")
    AssetState(attributeName=="currentScene", type == AssetType.RESIDENCE, getValueAsString() == "night")
    AssetEvent(type == AssetType.ROOM, attributeName=="presenceDetectedInteger", getValueAsNumber()==1)
    // Take the current value from the scene table
    AssetState($ref: attributeRef, type == AssetType.RESIDENCE, attributeName matches ("homeSceneStart" + util.formatDayOfWeek(drools.getWorkingMemory().getSessionClock().getCurrentTime())),
               $estimated_time: getValueAsNumber() -30 <= util.parseTimestamp(drools.getWorkingMemory().getSessionClock().getCurrentTime()) )//,
//               drools.getWorkingMemory().getSessionClock().getCurrentTime() >= util.parseTimestamp("04:00") )
then
    assets.dispatch( new AttributeEvent($id, "homeActualSceneStartTime", Values.create(drools.getWorkingMemory().getSessionClock().getCurrentTime()) ));
end

// Removed rule for switching scene after departure
// rule "Move - to ET at end of work"
// scenes are switched by timer protocol

// Removed rule
// rule "Move - to ET on vacation"
// it was indication in UI that vacation are active

// Removed rules
// rule "fetch actual departure time"
// rule "fetch later departure time"
// as "departure" is simply a start of a new scene and these should be covered by previous rules.
// TODO scene switch could be earlier and later. Both cases need be tested for each scene.
// As we have 2 presence scenes (home, evening) and 2 absence scenes (away, night) probably would be easier
// to have 2 sets of rules, like in the office separate rules for Arrival adjustment time and Departure.

// TODO special care must be taken for the Night scene as it can start before or after midnight.

rule "adjust estimated times at next scene change"
when
    // Question: isn't AssetType checking relevant here? attributeName should be unique here or not?
    // We are in the self learning mode
    AssetState(attributeName == "selfLearning", type == AssetType.RESIDENCE, isValueTrue() )
    // We don't do this when on Vacations
    AssetState(attributeName == "vacationDays", type == AssetType.RESIDENCE, isValueGreaterThan(0) )
    // Let's get in which scene are we now
    AssetState(attributeName == "currentScene", type == AssetType.RESIDENCE, $scene: getValueAsString() )
    // For which day of week are we calculating this?
    // Take the current value from the scene table
    AssetState($ref: id, type == AssetType.RESIDENCE, attributeName matches ($scene + "SceneStart" + util.formatDayOfWeek(drools.getWorkingMemory().getSessionClock().getCurrentTime())), $estimated_time: getValueAsNumber())
    // Now take the lastPresenceDetected (TODO here we will need probably a different logic dependent on scene)
    AssetState(attributeName == "lastPresenceDetected", type == AssetType.ROOM, $actual_time: getValueAsNumber(), isValueGreaterThan(0) )
then
    // Take arbitrary coefficient which works good
    Double alpha = 2.0/(3+1); // 3 stays for 3 days exponential average
    // Calculate exponential moving average from the known formula
    long new_estimated_time = (long) (alpha*util.parseTimestamp($actual_time) + (1-alpha)*util.parseTimestamp($estimated_time));
    // Update value in the table
    assets.dispatch( new AttributeEvent($ref, "newEstimatedTime", Values.create(new_estimated_time)) );
end

// ##########################################################################################################



