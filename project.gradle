// Common configuration applied to all projects
import static org.apache.tools.ant.taskdefs.condition.Os.*

// Build plugins
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "com.moowork.gradle:gradle-node-plugin:$nodePluginVersion"
    }
}

// Default repositories for dependency resolution
repositories {
    mavenCentral()
    jcenter()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
        url "http://m2repo.openremote.com/content/groups/public/"
    }
    maven {
        url "http://4thline.org/m2"
    }
}

// Eclipse needs help
apply plugin: "eclipse"

// Intellij needs help
apply plugin: 'idea'
// Use the same output directories in IDE as in gradle
idea {
    module {
        outputDir file('build/classes/main')
        testOutputDir file('build/classes/test')
    }
}
if(project.convention.findPlugin(JavaPluginConvention)) {
    // Change the output directory for the main and test source sets back to the old path
    sourceSets.main.output.classesDirs = new File(buildDir, "classes/main")
    sourceSets.test.output.classesDirs = new File(buildDir, "classes/test")
}

// Configure versions in gradle.properties (putting a gradle.properties file
// in a subproject only overrides root properties of same name for the actual
// subproject, not for its children!)
version = hasProperty("openremoteVersion") ? openremoteVersion : projectVersion

// Add console NodeJS plugin configuration and tasks
apply plugin: com.moowork.gradle.node.NodePlugin
def nodeDir = "${rootDir}/.node"
// Configuration of paths is completely broken in the gradle node plugin, this approach
// is the only one that results in a predictable location for installed modules
def nodeExtDir = "${nodeDir}/ext"
node {
    download = true
    version = nodeJSVersion
    workDir = file(nodeDir)
}

// Add bower tasks
task bowerInstall(type: NpmTask) {
    args = ['install', '--prefix', nodeExtDir, '-g', 'bower']
}
task bowerUpdate(type: NodeTask) {
    dependsOn bowerInstall
    script = file("${nodeExtDir}/bin/bower")
    args = ['update']
}
task bowerPrune(type: NodeTask) {
    dependsOn bowerInstall
    script = file("${nodeExtDir}/bin/bower")
    args = ['prune']
}

// Configure Java build
plugins.withType(JavaPlugin).whenPluginAdded {

    // Use Java 8
    tasks.withType(JavaCompile) {
        sourceCompatibility = "1.8"
        def warnLogFile = file("$buildDir/${name}Warnings.log")
        logging.addStandardErrorListener(new StandardOutputListener() {
            void onOutput(CharSequence output) {
                warnLogFile << output
            }
        })
        options.compilerArgs += ["-Xlint:unchecked", "-Xlint:deprecation"]
    }

    // JAR/ZIP base name is the fully qualified subproject name
    archivesBaseName = "${rootProject.name}${path.replaceAll(":", "-")}"
}

// Helper functions for project/task resolution when the main 
// repo is checked out as a git submodule and therefore a subproject
def resolvePath(String path) {
    findProject(":openremote") != null ? ":openremote" + path : path
}

def resolveProject(String path) {
    project(resolvePath(path))
}

def resolveTask(String path) {
    tasks.getByPath(resolvePath(path))
}

ext {
    resolvePath = this.&resolvePath
    resolveProject = this.&resolveProject
    resolveTask = this.&resolveTask
}