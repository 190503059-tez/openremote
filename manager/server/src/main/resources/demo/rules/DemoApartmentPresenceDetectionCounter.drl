package org.openremote.test.rules;

import java.util.ArrayList;
import org.openremote.model.*;
import org.openremote.model.asset.*
import org.openremote.model.value.Values
import org.openremote.model.attribute.AttributeEvent;

global java.util.logging.Logger LOG;
global org.openremote.model.rules.Assets assets;

/*
Uses 'motionCount' and optional 'co2Level' of a room asset to set the 'motionDetected',
'lastMotionDetected', and 'presenceDetected' attributes of the room. Motion detection
is based on multiple increments of the motion counter over a time window. Presence
detection is based on motion detection, and increasing CO2 level over a time window.
*/

rule "Set motion detected flag of room when motion counter increments"
when
    // A room were the motion detected flag is not set
    $room: AssetState(type == AssetType.ROOM, attributeName == "motionDetected", valueFalse)
    // And the motion counter incremented at least 3 times in the last 2 minutes
    accumulate(
        AssetEvent(id == $room.id, attributeName == "motionCount", valueGreaterThanOldValue) over window:time(2m);
        $motionIncrements: count(1);
        $motionIncrements >= 3
    )
then
    // Set the motion detected flag of the room
    assets.dispatch(
            new AttributeEvent($room.getId(), "motionDetected", Values.create(true))
    );
end


rule "Update the motion detected timestamp when motion counter increments"
when
    // A room were the motion detected flag is  set
    $room : AssetState(type == AssetType.ROOM, attributeName == "motionDetected", valueTrue)
    // And the motion counter increments
    AssetState(id == $room.id, attributeName == "motionCount", valueGreaterThanOldValue, $lastIncrementTimestamp: valueTimestamp)
    // And the last counter increment event is newer than\ the recorded last detected time
    AssetState(id == $room.id, attributeName == "lastMotionDetected", isValueLessThan($lastIncrementTimestamp))
then
    // Update the last presence detected timestamp to the latest counter increment event
    assets.dispatch(
            new AttributeEvent($room.getId(), "lastMotionDetected", Values.create($lastIncrementTimestamp))
    );
end


rule "Clear motion detected flag of a room if the motion counter doesn't increment"
when
    // A room were the motion detected flag is set
    $room: AssetState(type == AssetType.ROOM, attributeName == "motionDetected", valueTrue)
    // And the room has a motion counter
    AssetState(id == $room.id, attributeName == "motionCount")
    // And the motion counter was not incremented in the last 15 minutes
    accumulate(
        AssetEvent(id == $room.id, attributeName == "motionCount", valueGreaterThanOldValue) over window:time(15m);
        $countMotion: count(1);
        $countMotion == 0
    )
then
    // Clear the motion detected flag of the room
    assets.dispatch(
            new AttributeEvent($room.getId(), "motionDetected", Values.create(false))
    );
end


rule "Set presence detected flag of room when motion is detected and confirmed with CO2 level rising"
when
    // A room were the presence detected flag is not set
    $room: AssetState(type == AssetType.ROOM, attributeName == "presenceDetected", valueFalse)
    // And the motion detected flag is set
    AssetState(id == $room.id, attributeName == "motionDetected", valueTrue)
    // And the CO2 level increased at least 2 times in the last 11 minutes
    accumulate(
        AssetEvent(id == $room.id, attributeName == "co2Level", valueGreaterThanOldValue) over window:time(11m);
        $countCO2: count(1);
        $countCO2 >= 2
    )
then
    // Set the presence detected flag of the room
    assets.dispatch(
            new AttributeEvent($room.getId(), "presenceDetected", Values.create(true))
    );
end


rule "Clear presence detected flag of a room if no motion or CO2 increase was sensed in a while"
when
    // A room weare the presence detected flag is set
    $room: AssetState(type == AssetType.ROOM, attributeName == "presenceDetected", valueTrue)
    // And the motion detected flag is not set
    AssetState(id == $room.id, attributeName == "motionDetected", valueFalse)
    // And the room has a CO2 sensor
    AssetState(id == $room.id, attributeName == "co2Level")
    // And the CO2 level was not increased in the last 11 minutes
    accumulate(
        AssetEvent(id == $room.id, attributeName == "co2Level", valueGreaterThanOldValue) over window:time(11m);
        $countCO2: count(1);
        $countCO2 == 0
    )
then
    // Clear the presence detected flag of the room
    assets.dispatch(
            new AttributeEvent($room.getId(), "presenceDetected", Values.create(false))
    );
end
