package org.openremote.test.rules;

import java.util.ArrayList;
import org.openremote.model.*;
import org.openremote.model.asset.*;
import org.openremote.model.value.*;
import org.openremote.model.attribute.*;

global java.util.logging.Logger LOG;
global org.openremote.model.rules.Assets assets;

/*
Uses 'motionSensor' and optional 'co2Level' of a room asset to set the 'presenceDetected'
and 'lastPresenceDetected' attributes of the room. Presence detection is based on motion
sensing and if available for a room, increasing CO2 level over a time window. The assumption
is that the 'motionSensor' is set to 0 or 1, depending on whether motion has been detected
in a room over a time window that is internal to the sensor (e.g. the last minute). The
'presenceDetected' attribute of the apartment is set depending on whether any child room
assets have presence set.
*/


rule "Set presence detected flag of room when motion is detected and no CO2 sensor exists"
when
    // A room were the presence detected flag is not set
    $room: AssetState(type == AssetType.ROOM, attributeName == "presenceDetected", valueFalse)
    // And the motion sensor has been triggered
    AssetState(id == $room.id, attributeName == "motionSensor", isValueGreaterThan(0))
    // And the room does not have a CO2 sensor
    not AssetState(id == $room.id, attributeName == "co2Level")
then
    // Set the presence detected flag of the room
    assets.dispatch(
            new AttributeEvent($room.getId(), "presenceDetected", Values.create(true))
    );
end


rule "Clear presence detected flag of room if no motion is detected and no CO2 sensor exists"
when
    // A room where the presence detected flag is set
    $room: AssetState(type == AssetType.ROOM, attributeName == "presenceDetected", valueTrue)
    // And the motion sensor has not been triggered
    AssetState(id == $room.id, attributeName == "motionSensor", value == null || valueAsNumber == 0)
    // And the room does not have a CO2 sensor
    not AssetState(id == $room.id, attributeName == "co2Level")
then
    // Clear the presence detected flag of the room
    assets.dispatch(
            new AttributeEvent($room.getId(), "presenceDetected", Values.create(false))
    );
end


rule "Set presence detected flag of room when motion is detected and confirmed with CO2 level rising"
when
    // A room were the presence detected flag is not set
    $room: AssetState(type == AssetType.ROOM, attributeName == "presenceDetected", valueFalse)
    // And the motion sensor has been triggered
    AssetState(id == $room.id, attributeName == "motionSensor", isValueGreaterThan(0))
    // And the CO2 level has increased at least 2 times in the last 11 minutes
    accumulate(
        AssetEvent(id == $room.id, attributeName == "co2Level", valueGreaterThanOldValue) over window:time(11m);
        $increasedCO2: count(1);
        $increasedCO2 >= 2
    )
then
    // Set the presence detected flag of the room
    assets.dispatch(
            new AttributeEvent($room.getId(), "presenceDetected", Values.create(true))
    );
end


rule "Clear presence detected flag of room if no motion or CO2 increase was sensed in a while"
when
    // A room where the presence detected flag is set
    $room: AssetState(type == AssetType.ROOM, attributeName == "presenceDetected", valueTrue)
    // And the motion sensor has not been triggered
    AssetState(id == $room.id, attributeName == "motionSensor", value == null || valueAsNumber == 0)
    // And the room has a CO2 sensor
    AssetState(id == $room.id, attributeName == "co2Level")
    // And the CO2 level has not increased in the last 11 minutes
    accumulate(
        AssetEvent(id == $room.id, attributeName == "co2Level", valueGreaterThanOldValue) over window:time(11m);
        $increasedCO2: count(1);
        $increasedCO2 == 0
    )
then
    // Clear the presence detected flag of the room
    assets.dispatch(
            new AttributeEvent($room.getId(), "presenceDetected", Values.create(false))
    );
end


rule "Update presence detected timestamp of room with last trigger of motion sensor"
when
    // A room were the presence detected flag is set
    $room : AssetState(type == AssetType.ROOM, attributeName == "presenceDetected", valueTrue)
    // And the motion sensor has been triggered
    AssetState(id == $room.id, attributeName == "motionSensor", isValueGreaterThan(0), $lastTriggerTimestamp: valueTimestamp)
    // And the last sensor trigger event is newer than the recorded last detected time
    AssetState(id == $room.id, attributeName == "lastPresenceDetected", isValueLessThan($lastTriggerTimestamp))
then
    // Update the last presence detected timestamp to the latest motion sensor trigger event
    assets.dispatch(
            new AttributeEvent($room.getId(), "lastPresenceDetected", Values.create($lastTriggerTimestamp))
    );
end


rule "Set presence detected flag of apartment if presence is detected in any room"
when
    $residence : AssetState(type == AssetType.RESIDENCE, attributeName == "presenceDetected", valueFalse)
    $room : AssetState(parentId == $residence.id, type == AssetType.ROOM, attributeName == "presenceDetected", valueTrue)
then
    assets.dispatch(
            new AttributeEvent($residence.getId(), "presenceDetected", Values.create(true))
    );
end


rule "Clear presence detected flag of apartment when no presence is detected in any room"
when
    $residence : AssetState(type == AssetType.RESIDENCE, attributeName == "presenceDetected", valueTrue)
    not AssetState(parentId == $residence.id, type == AssetType.ROOM, attributeName == "presenceDetected", valueTrue)
then
    assets.dispatch(
            new AttributeEvent($residence.getId(), "presenceDetected", Values.create(false))
    );
end
