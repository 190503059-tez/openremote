package org.openremote.test.rules;

import org.openremote.model.*;
import org.openremote.model.asset.*
import org.openremote.model.value.*
import org.openremote.model.attribute.*
import java.time.DayOfWeek
import org.drools.core.util.Drools

global java.util.logging.Logger LOG;
global org.openremote.model.rules.Assets assets;

rule "When vacation mode is enabled, execute AWAY scene and disable scene timers"
when
    $residence : AssetState(type == AssetType.RESIDENCE, attributeName == "vacationUntil", value != null, oldValue == null)
then
    assets.dispatch(
        new AttributeEvent($residence.getId(), "awayScene", AttributeExecuteStatus.REQUEST_START.asValue()),
        new AttributeEvent($residence.getId(), "disableSceneTimer", AttributeExecuteStatus.REQUEST_START.asValue())
    );
end

rule "When vacation mode is disabled, enable scene timers"
when
    $residence : AssetState(type == AssetType.RESIDENCE, attributeName == "vacationUntil", value == null, oldValue != null)
then
    assets.dispatch(
        new AttributeEvent($residence.getId(), "enableSceneTimer", AttributeExecuteStatus.REQUEST_START.asValue())
    );
end

rule "When vacation mode is on, check periodically if vacation mode should be disabled"
    // Run every hour
    timer (cron: 0 0 0/1 1/1 * ? *)
when
    $residence : AssetState(type == AssetType.RESIDENCE, attributeName == "vacationUntil", $vacationUntil: valueAsNumber, valueAsNumber > 0)
then
    if ($vacationUntil <= drools.getWorkingMemory().getSessionClock().getCurrentTime()) {
        assets.dispatch(
            new AttributeEvent($residence.getId(), "vacationUntil", null)
        );
    }
end

